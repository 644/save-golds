using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;

namespace SaveGolds.Data
{
    public static class SplitFileParser
    {
        public static GoldSplitSet ParseSplitFile(string splitFilePath)
        {
            var document = new XmlDocument();
            document.Load(splitFilePath);

            var gameNameNode = (XmlText)document.SelectSingleNode("//GameName[1]/text()");
            var categoryNameNode = (XmlText)document.SelectSingleNode("//CategoryName[1]/text()");
            if(gameNameNode == null || categoryNameNode == null)
            {
                throw new InvalidSplitFileException(splitFilePath);
            }

            string gameName = gameNameNode.Value;
            string categoryName = categoryNameNode.Value;
            List<GoldSplit> goldSplits = GetGoldSplits(document);
            return new GoldSplitSet { GameName = gameName, CategoryName = categoryName, GoldSplits = goldSplits };
        }

        private static List<GoldSplit> GetGoldSplits(XmlDocument document)
        {
            var goldSplits = new List<GoldSplit>();

            XmlNodeList segments = document.SelectNodes("/Run/Segments[1]/Segment");
            foreach (XmlNode segment in segments)
            {
                var nameNode = (XmlText)segment.SelectSingleNode("Name/text()");
                if(nameNode == null) 
                    continue;
                var realTimeNode = (XmlText)segment.SelectSingleNode("BestSegmentTime/RealTime/text()");
                var gameTimeNode = (XmlText)segment.SelectSingleNode("BestSegmentTime/GameTime/text()");
                if(realTimeNode == null && gameTimeNode == null)
                    continue;

                var goldSplit = new GoldSplit { SplitName = nameNode.Value };
                if(realTimeNode != null)
                {
                    goldSplit.RealTime = ParseLiveSplitTimeStamp(realTimeNode.Value);
                }
                if(gameTimeNode != null)
                {
                    goldSplit.GameTime = ParseLiveSplitTimeStamp(gameTimeNode.Value);
                }
                goldSplits.Add(goldSplit);
            }

            return goldSplits;
        }

        private static TimeSpan ParseLiveSplitTimeStamp(string lsTimestamp)
        {
            double[] timeParts =
                lsTimestamp
                    .Split(':')
                    .Select(double.Parse)
                    .ToArray();
            double millisTransition = timeParts[2] - Math.Truncate(timeParts[2]);
            int milliseconds = (int)(millisTransition * 1000);
            return new TimeSpan(
                0,
                (int)timeParts[0],
                (int)timeParts[1],
                (int)timeParts[2],
                milliseconds
            );
        }
    }

    public class InvalidSplitFileException : Exception
    {
        public InvalidSplitFileException(string splitFilePath) : 
            base($"Please ensure ${splitFilePath} is a valid LSS file generated by LiveSplit")
        { }
    }
}
